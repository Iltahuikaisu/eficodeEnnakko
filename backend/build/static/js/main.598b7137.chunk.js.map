{"version":3,"sources":["content/geocoding.js","content/listtimetables.js","content/busstimer.js","content/timetable.js","App.js","index.js"],"names":["Geocoding","address","axios","get","SingleRoute","props","route","destination","routeInReadableForm","reduce","acc","current","endPoint","startPoint","modeOfTransit","startTime","Date","toLocaleTimeString","undefined","hourCycle","timeStyle","hour","minute","endTime","mode","toLowerCase","shortName","from","name","to","ListTimetables","listOfItineraries","start","listOfTimetables","map","key","legs","Timer","useState","time","timer","setTimer","intervalId","useEffect","setInterval","state","alert","window","location","reload","second","clearInterval","Math","floor","abs","client","ApolloClient","uri","setNewRoute","dataSetters","setRouteAddresses","value","routeAddresses","end","newDestination","newStartPlaceData","newEndPlaceData","newData","TimetableToEficode","data","startPlaceData","endPlaceData","waitTime","newWaitTime","setNewDestination","isErrorInInput","setErrorInInput","newDestinationPlaceData","query","gql","lat","lon","then","resp","console","log","plan","itineraries","getTime","Geo","respGeo","features","properties","geometry","coordinates","onChange","event","target","onClick","preventDefault","setWaitTime","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.598b7137.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n\r\nconst Geocoding = (address) => {\r\n    return(axios.get(`http://api.digitransit.fi/geocoding/v1/search?text=${address}&sources=oa`)\r\n    )\r\n}\r\n\r\nexport default Geocoding","import React from 'react'\r\n\r\nconst SingleRoute = (props) => {\r\n    var route = props.route\r\n    const destination = props.destination\r\n\r\n    const routeInReadableForm = route.reduce((acc, current)=> {\r\n        var startTime = new Date(current.startTime).toLocaleTimeString(undefined,{\r\n            hourCycle:\"h24\", timeStyle:\"short\", hour:\"2-digit\", minute:\"2-digit\"\r\n               })\r\n        var endTime = new Date(current.endTime).toLocaleTimeString(undefined,{\r\n            hourCycle:\"h24\", timeStyle:\"short\", hour:\"2-digit\", minute:\"2-digit\"\r\n        })\r\n        var endPoint\r\n        var startPoint\r\n        var modeOfTransit\r\n        if (current.route) {\r\n            modeOfTransit = current.mode.toLowerCase() + \" \" + current.route.shortName\r\n        } else {\r\n            modeOfTransit = \"walk\"\r\n        }\r\n        if (current.from.name ===\"Origin\") {\r\n            startPoint = \"Eficode\"\r\n        } else {\r\n            startPoint = current.from.name\r\n        }\r\n        if (current.to.name ===\"Destination\") {\r\n            endPoint = \"Destination\"\r\n        } else {\r\n            endPoint = current.to.name\r\n        }\r\n        if (startPoint ===\"Eficode\" && endPoint===\"Destination\") {\r\n            return(\r\n                \"Leave by \" + startTime + \" and walk to \" + destination.name + \". Arrival at \" + endTime\r\n            )\r\n        }\r\n        if (startPoint === \"Eficode\") {\r\n            return(\"Leave by \" + startTime\r\n                + \" and walk to \" + endPoint + \" then \")\r\n        }\r\n        if (endPoint === \"Destination\") {\r\n            return(acc + \" walk to destination. Arrival at \" + endTime )\r\n        }\r\n        return(acc  + ' to ' + endPoint + ' by ' + modeOfTransit + ', then ')\r\n    },'')\r\n    return(\r\n        <>{routeInReadableForm}</>\r\n    )\r\n}\r\n\r\nconst ListTimetables = ({listOfItineraries,start,destination}) => {\r\n\r\n    if (!listOfItineraries) {\r\n        return(\r\n            <>\r\n\r\n            </>\r\n        )\r\n    }\r\n    const listOfTimetables = listOfItineraries.map((route)=> {\r\n        return(<li key = {route.legs[0].startTime}>\r\n            <SingleRoute route = {route.legs} destination = {destination} start = {start}/>\r\n        </li>)\r\n\r\n    })\r\n    return(\r\n        <>\r\n        {listOfTimetables}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nexport default ListTimetables","import React, {useState, useEffect} from \"react\";\r\nconst second = (props) => {\r\n    const decrease = 1000;\r\n\r\n    props.setTimer((state)=>{\r\n        if (state <=-5000) {\r\n            alert('you should run now')\r\n             window.location.reload()\r\n        }\r\n        return(state - decrease)\r\n    })\r\n}\r\n\r\nconst Timer =  (props) => {\r\n    const [timer, setTimer] = useState(props.time)\r\n    var intervalId = 1\r\n    useEffect(()=>{\r\n        intervalId=setInterval(()=>second({timer:timer, setTimer:setTimer}),1000)\r\n        return(\r\n            ()=>{\r\n                clearInterval(intervalId)\r\n            }\r\n        )\r\n    },[intervalId])\r\n\r\n\r\n    return(\r\n        <div>\r\n            {Math.floor(Math.abs(timer/(1000*60))) + \":\" + (Math.floor(timer/(1000))%60)}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Timer","import React, {useEffect, useState} from \"react\";\r\nimport ApolloClient, {gql} from 'apollo-boost'\r\nimport Geo from './geocoding'\r\nimport ListOptions from './listtimetables'\r\nimport BusTimer from './busstimer'\r\n\r\nconst client = new ApolloClient({\r\n    uri:'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'});\r\n\r\nconst reverseRoute = (props) => {\r\n    props.dataSetters.setRouteAddresses((value)=> {\r\n        return (\r\n            {\r\n                start: {address: value.end.address, name: value.end.name},\r\n                end: {address: value.start.address, name: value.start.name}\r\n            }\r\n        )\r\n    })\r\n    props.dataSetters.newStartPlaceData( undefined)\r\n    props.dataSetters.newEndPlaceData(undefined)\r\n    props.dataSetters.newData(undefined)\r\n}\r\nconst setNewRoute = (props) => {\r\n    props.dataSetters.setRouteAddresses((value)=> {\r\n        if ( props.dataSetters.routeAddresses.start.name ==='Eficode') {\r\n            return (\r\n                {\r\n                    end: {address:  props.dataSetters.newDestination, name:  props.dataSetters.newDestination},\r\n                    start: {address: value.start.address, name: value.start.name}\r\n                }\r\n            )\r\n        } else {\r\n            return(\r\n                {\r\n                    start:{address:  props.dataSetters.newDestination, name:  props.dataSetters.newDestination},\r\n                    end:{address: value.start.address, name: value.start.name}\r\n                }\r\n            )\r\n        }\r\n\r\n    })\r\n    props.dataSetters.newStartPlaceData( undefined)\r\n    props.dataSetters.newEndPlaceData(undefined)\r\n    props.dataSetters.newData(undefined)\r\n\r\n}\r\n\r\nconst TimetableToEficode = () => {\r\n    const [data, newData] = useState()\r\n    const [startPlaceData, newStartPlaceData] = useState()\r\n    const [endPlaceData, newEndPlaceData] = useState()\r\n    const [waitTime, newWaitTime] = useState()\r\n    const [newDestination, setNewDestination] = useState()\r\n    const [isErrorInInput, setErrorInInput] = useState(false)\r\n    const [routeAddresses, setRouteAddresses] = useState(\r\n        {start:{address:'Pohjoinen Rautatiekatu 25, Helsinki',name:'Eficode'},\r\n                    end:{address:'Männikkötie 6, Helsinki',name:'Maunulan kotipizza'}})\r\n    const dataSetters = {newData, newStartPlaceData, newDestinationPlaceData: newEndPlaceData,\r\n        newWaitTime,setRouteAddresses,newDestination,routeAddresses,newEndPlaceData}\r\n\r\n\r\n    useEffect(()=>{\r\n        if(startPlaceData && endPlaceData) {\r\n            if (startPlaceData !== 'loading' && endPlaceData !== 'loading') {\r\n                client.query({\r\n                        query: gql`{\r\n  plan(\r\n    from: {lat: ${startPlaceData.lat}, lon: ${startPlaceData.lon}}\r\n    to: {lat: ${endPlaceData.lat}, lon: ${endPlaceData.lon}}\r\n    numItineraries: 5\r\n  ) {\r\n    itineraries {\r\n      legs {\r\n        startTime\r\n        from {\r\n            name\r\n        }\r\n        to {\r\n            name\r\n        }\r\n        agency {\r\n            name\r\n        }\r\n        route {\r\n            shortName\r\n            longName\r\n        }\r\n        endTime\r\n        mode\r\n        duration\r\n        realTime\r\n        distance\r\n        transitLeg\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\n                    }\r\n                ).then((resp) => {\r\n                    console.log(resp)\r\n                    if (resp.data.plan.itineraries[0]) {\r\n\r\n                        newWaitTime(resp.data.plan.itineraries[0].legs[0].startTime\r\n                            - new Date().getTime())\r\n                        setErrorInInput(false)\r\n                    } else {\r\n                        setErrorInInput(true)\r\n                    }\r\n\r\n                    newData(resp)\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    },[startPlaceData,endPlaceData])\r\n\r\n    useEffect(() => {\r\n        newStartPlaceData('loading')\r\n        newEndPlaceData('loading')\r\n        Geo(routeAddresses.start.address).then((respGeo) => {\r\n            console.log(respGeo)\r\n            var name\r\n            if (routeAddresses.start.address === 'Pohjoinen Rautatiekatu 25, Helsinki') {\r\n                name = 'Eficode'\r\n            } else {\r\n                name = respGeo.data.features[0].properties.name\r\n            }\r\n\r\n            newStartPlaceData({\r\n                lon: respGeo.data.features[0].geometry.coordinates[0],\r\n                lat: respGeo.data.features[0].geometry.coordinates[1], name: name\r\n                    })\r\n\r\n                })\r\n\r\n            newEndPlaceData('loading')\r\n        Geo(routeAddresses.end.address).then((respGeo) => {\r\n            console.log(respGeo)\r\n            var name\r\n            if (routeAddresses.end.address === 'Pohjoinen Rautatiekatu 25, Helsinki') {\r\n                name = 'Eficode'\r\n            } else {\r\n                name = respGeo.data.features[0].properties.name\r\n            }\r\n            newEndPlaceData({\r\n                lon: respGeo.data.features[0].geometry.coordinates[0]\r\n                , lat: respGeo.data.features[0].geometry.coordinates[1], name: name\r\n                    })\r\n        })\r\n        },[routeAddresses]\r\n    )\r\n    if(isErrorInInput) {\r\n        return(\r\n            <div>\r\n                <h3>Change the non-Eficode destination</h3>\r\n                <form>\r\n                    <input onChange={(event)=> {\r\n                        setNewDestination(event.target.value)}}/>\r\n                    <button onClick={(event)=>{\r\n                        event.preventDefault()\r\n                        setNewRoute({dataSetters:dataSetters})}}>Submit</button>\r\n                    <div>{newDestination}</div>\r\n                    <h3>Error in input, try again</h3>\r\n                    <p>\r\n                        Working formula is\r\n                        'Nameoftheroad 42, Helsinki'\r\n                        Please don't ask route to places\r\n                        HSL will not take you.\r\n\r\n                    </p>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n    if (!data || data === 'queryStarted') {\r\n        return (\r\n            <div>\r\n                loading\r\n            </div>\r\n        )\r\n    }\r\n        return (\r\n            <>\r\n                <h3>Change the non-Eficode destination</h3>\r\n                <form>\r\n                    <input onChange={(event)=> {\r\n\r\n                        setNewDestination(event.target.value)}}/>\r\n                    <button onClick={()=>setNewRoute({dataSetters:dataSetters})}>Submit</button>\r\n\r\n                </form>\r\n                <div>\r\n                    <h3>Reverse the route</h3>\r\n                    <button onClick={()=>reverseRoute({dataSetters:dataSetters})}>Change</button>\r\n                    <h3>{`Timetables from ${startPlaceData.name} to ${endPlaceData.name}`}</h3>\r\n                    <BusTimer time={waitTime}\r\n                              dataSetters={dataSetters}/>\r\n                </div>\r\n                <div>\r\n                    <ListOptions listOfItineraries={data.data.plan.itineraries}\r\n                                 setWaitTime={newWaitTime}\r\n                                 waitTime={waitTime}\r\n                                 start={startPlaceData}\r\n                                 destination={endPlaceData}/>\r\n                </div>\r\n            </>\r\n        )\r\n\r\n    }\r\n\r\n\r\n\r\n\r\nexport default TimetableToEficode","import React from 'react';\nimport './App.css';\nimport TimetableToEficode from './content/timetable'\n\nfunction App() {\n\n  return (\n <div>\n     <h2>\n         Eficode ennakko\n     </h2>\n     <TimetableToEficode/>\n </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}